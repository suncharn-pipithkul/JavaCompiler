1. Enter the number of hours it took you to complete the project between
   the <<< and >>> signs below (eg, <<<10>>>).

   <<<20>>>
   
2. Enter the difficulty level (1: very easy; 5: very difficult) of the project
   between the <<< and >>> signs below (eg, <<<3>>>).

   <<<2>>>

3. Provide a short description of how you approached each problem, issues you 
   encountered, and how you resolved those issues.

   Part I (Additions to JavaCC Scanner)

   Problem 1 (Multiline Comment)
      Approach: ...
      I was very confused on JavaCC syntax, so I looked up the book page 54
      which explains context-free grammars for JavaCC.
      I used the single line comment as an example for multi line.
      It's almost the exact same code with different tokens /* */
      to enter and exit comments and different state name.

      Issues and resolution: ...
      I didn't have any issue.

   Problem 2 (Operators)
      Approach: ...
      I used grammar.pdf to see what each operators' name are.
      Then, add them in as tokens for the scanner.

      Issues and resolution: ...
      I didn't have any issue.

   Problem 3 (Reserved Words)
      Approach: ...
      Same approach as problem 2.

      Issues and resolution: ...
      I didn't have any issue.

   Problem 4 (Literals)
      Approach: ...
      This one is a bit confusing because of rules that have [].
      I tried to look up more JavaCC syntax from the book and found that it
      references Java.net for JavaCC documentation. It turns out that Java.net
      doesn't exist anymore :(. I, then, look up the other book
      "Generating Parsers with JavaCC" by Tom Copeland to find more detail
      on JavaCC regular expression and found "?" to be 0 or 1 instance.
      This is perfect for []. After that, I just follow the grammar and
      translate it to JavaCC regex.

      Issues and resolution: ...
      Scanner get DIGITS token instead of INT_LITERAL.
      My solution was to use # to make DIGITS a private rule.

   Part II (Additions to JavaCC Parser)

   Problem 5 (Long and Double Basic Types)
      Approach: ...
      Using Parser.java, grammar, and my note from previous project as a guide.
      double and long are in basic type and literal rules.
      I checked my result with Literal.java because BasicTypes.java uses
      operators which mean I need to implement problem 6 first before
      I can check if my problem 5 is completed or not.

      Issues and resolution: ...
      I didn't have any issue.

   Problem 6 (Operators)
      Approach: ...
      Same approach here using previous project as a guide.
      I created/edited all rules in Java grammar from assignmentExpression
      to postfixExpression. It takes a long time to do this.

      Issues and resolution: ...
      ++ caused and error saying "Invalid statement expression;
      it does not have a side-effect". To fix this, I looked up
      my old note that said to change statementExpression as well to
      check for instanceof post ++ pre -- which solved it.

   Problem 7 (Conditional Expression)
      Approach: ...
      finished it while doing problem 6.

      Issues and resolution: ...
      I didn't have any issue.

   Problem 8 (Do Statement)
      Approach: ...
      I just follow the grammar and add DO in statement rule.

      Issues and resolution: ...
      I didn't have any issue.

   Problem 9 (For Statement)
      Approach: ...
      I just follow the grammar and previous handcrafted Parser.java.
      I added for case in statement which needs forInit() and forUpdate().
      forInit() have 2 branches, so I used LOOKAHEAD to check for
      which branch to go to. forUpdate()'s logic is just like 1 branch of
      forInit().

      Issues and resolution: ...
      I didn't have any issue.

   Problem 10 (Break Statement)
      Approach: ...
      I just follow the grammar and add BREAK in statement rule.

      Issues and resolution: ...
      I forgot to update line number for break statement and my ast
      said break is at line 0. To fix it, I just add the Java code to update
      line after found <BREAK>.

   Problem 11 (Continue Statement)
      Approach: ...
      I just follow the grammar and add CONTINUE in statement rule.

      Issues and resolution: ...
      I didn't have any issue.

   Problem 12 (Switch Statement)
      Approach: ...
      I just follow the grammar and add SWITCH in statement rule.
      After that I have to create switchBlockStatementGroup and switchLabel
      rule. To check what variable and which Object are needed, I check
      my handcrafted Parser and follow the logic I had there.

      Issues and resolution: ...
      I didn't have any issue.

   Problem 13 (Exception Handlers)
      Approach: ...
      Again used my note and grammar as the guide, I found that
      I need to add try, throw, and throws. try & throw are in statement rule.
      throws is in memberDecl rule
      (and later interfaceMemberDecl in problem 14).

      Issues and resolution: ...
      I didn't have any issue.

   Problem 14 (Interface Type Declaration)
      Approach: ...
      Same approach here, my note said to modify/edit
      typeDeclaration, classDeclaration, interfaceDeclaration, interfaceBody,
      interfaceMemberDecl. I look these rules up in Java grammar and contrast
      it to the current version. For interfaceBody, I used classBody as guide.
      For interfaceMemberDecl, I used memberDecl as guide.

      Issues and resolution: ...
      The issue I had here were minors such as writing the JObject name wrong.
      It was easy to identify since JavaCC reported the sentence
      that was wrong.

4. Did you receive help from anyone? List their names, status (classmate, 
   CS451/651 grad, TA, other), and the nature of help received.

   Name               Status       Help Received
   ----               ------       -------------

   ...                ...          ...
   I did not received help.

5. List any other comments here. Feel free to provide any feedback on how
   much you learned from doing the assignment, and whether you enjoyed
   doing it.

   ...
   I think this project is much easier to do than the handcrafted Scanner
   and Parser one because the syntax is much closer to context-free grammar
   for Java. It was fun to do but somewhat tedious.
