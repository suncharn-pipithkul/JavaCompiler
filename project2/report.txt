1. Enter the number of hours it took you to complete the project between
   the <<< and >>> signs below (eg, <<<10>>>).

   <<<10>>>
   
2. Enter the difficulty level (1: very easy; 5: very difficult) of the project
   between <<< and >>> signs below (eg, <<<3>>>).

   <<<3>>>

3. Provide a short description of how you approached each problem, issues you 
   encountered, and how you resolved those issues.

   Problem 1 (Multiline Comment)
      Approach: ...
      I followed the logic of // comment which would consume whitespace until
      we find // together, then we consume all chars until we see \n or EOF.
      The difference here is that instead of consuming until we see 1 char
      (\n or EOF) we need to check for 2 chars together (*/) or 1 char EOF.
      So as soon as we starts consuming and we see *, I check the next char.
      If it's / then we stop. Otherwise, continue and throw away the * as well.

      Issues and resolution: ...
      The first time I tried it, my scanner disregard multiline comment as
      it should but it somehow tokenize / inside /* as a division symbol.
      I did not know how to debug this (even now), so followed the algorithm
      line by line on paper and found that I forgot to do nextCh() in 1 part.

   Problem 2 (Operators)
      Approach: ...
      I just realized that we have grammar.pdf to check for each operator's
      Token name. I named them accordingly. I updated my lexicalgrammar file.
      TokenKind and Scanner to detect the operator.
      The logic in the Scanner are very similar to detecting multi chars
      operators that we did in Project 1, so it was easy for me.
      I implemented all of them at once and used Operators.java file
      to check if there is any operator that got Tokenized wrong.

      Issues and resolution: ...
      I did not have any issue implementing this.
   
   Problem 3 (Reserved Words)
      Approach: ...
      This is the first time I implement reserved words in the scanner.
      First, I look around the Scanner file to see how existing reserved words
      were implemented. I found that it's all in the Scanner constructor.
      From there, I used grammar.pdf to check for name and follow the logic
      presented in Scanner constructor for each reserved word.

      Issues and resolution: ...
      I did not have any issue implementing this.

   Problem 4 (Literals)
      Approach: ...
      This is the hardest one. First, I look for how the scanner implemented
      existing char and string literal. Next, I look at grammar.pdf to see
      the rule for long and double. I implemented long first since it's much
      simpler. For double, I drew a decision tree because the grammar is
      complex. After that I implemented double 1 decision branch at a time
      and check if it's correct or not with Literals.java.

      Issues and resolution: ...
      Everything works well except the . digits [expo] [suffix] case.
      My scanner read .0e0d as <double_lit> .0e0 then tokenize
      "d" as <Identifier>. By trial and error, I found that I need to
      remove one of nextCh() calls and it works.

4. Did you receive help from anyone? List their names, status (classmate, 
   CS451/651 grad, TA, other), and the nature of help received.

   Name               Status       Help Received
   ----               ------       -------------

   ...                ...          ...
   Luke Vu            classmate    He told me to look at grammar.pdf for
                                   double's grammar rule.

5. List any other comments here. Feel free to provide any feedback on how
   much you learned from doing the assignment, and whether you enjoyed
   doing it.

   ...
   I'm not gonna lie. Problem 2 & 3 were very tedious to do since each operator
   or reserved word is implemented similarly in the scanner. However, problem 1
   and 4 were very fun to do especially double.
